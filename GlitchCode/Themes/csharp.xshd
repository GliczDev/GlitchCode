<?xml version="1.0"?>
<SyntaxDefinition name="C#" extensions=".cs" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2019">
	<!-- The named colors 'Comment' and 'String' are used in SharpDevelop to detect if a line is inside a multiline string/comment -->
	<Color name="Comment"             foreground="#FF57A64A" exampleText="// comment" />
	<Color name="String"              foreground="#FFD69D85" exampleText="string text = &quot;Hello, World!&quot;"/>
	<Color name="StringInterpolation" foreground="#FFffd68f" exampleText="string text = $&quot;Hello, {name}!&quot;"/>
	<Color name="Char"                foreground="#FFD69D85" exampleText="char linefeed = '\n';"/>
	<Color name="Preprocessor"        foreground="#FF9B9B9B" exampleText="#region Title"/>
	<Color name="Punctuation"         foreground="White" exampleText="a(b.c);"/>

	<Color name="ValueTypeKeywords"     foreground="#FF00A0FF" exampleText="bool b = true;"/>

	<Color name="ReferenceTypeKeywords" foreground="#FF559CD6" exampleText="object o;"/>
	<Color name="MethodCall"            foreground="#FFdcdcaa" exampleText="o.ToString();"/>
	<Color name="NumberLiteral"         foreground="#FFb5cea8" exampleText="3.1415f"/>
	<Color name="ThisOrBaseReference"   foreground="#FF3a6a9b" exampleText="this.Do(); base.Do();"/>
	<Color name="NullOrValueKeywords"   foreground="#FF559CD6" exampleText="if (value == null)"/>
	<Color name="Keywords"              foreground="#FFd8a0df" exampleText="if (a) {} else {}"/>
	<Color name="GotoKeywords"          foreground="#FFd8a0df" exampleText="continue; return null;"/>
	<Color name="ContextKeywords"       foreground="#FFd8a0df" exampleText="var a = from x in y select z;"/>
	<Color name="ExceptionKeywords"     foreground="#FFd8a0df" exampleText="try {} catch {} finally {}"/>
	<Color name="CheckedKeyword"        foreground="#FF559CD6" exampleText="checked {}"/>
	<Color name="UnsafeKeywords"        foreground="#FF559CD6" exampleText="unsafe { fixed (..) {} }"/>
	<Color name="OperatorKeywords"      foreground="#FFD69D85" exampleText="public static implicit operator..."/>
	<Color name="ParameterModifiers"    foreground="#FF559CD6" exampleText="(ref int a, params int[] b)"/>
	<Color name="Modifiers"             foreground="#FF559CD6" exampleText="static readonly int a;"/>
	<Color name="Visibility"            foreground="#FF559CD6" exampleText="public override void ToString();"/>
	<Color name="NamespaceKeywords"     foreground="#FF559CD6" exampleText="namespace A.B { using System; }"/>
	<Color name="GetSetAddRemove"       foreground="#FF559CD6" exampleText="int Prop { get; set; }"/>
	<Color name="TrueFalse"             foreground="#FF00A0FF" exampleText="b = false; a = true;"/>
	<Color name="TypeKeywords"          foreground="#FF559CD6" exampleText="if (x is int) { a = x as int; type = typeof(int); size = sizeof(int); c = new object(); }"/>
	<Color name="SemanticKeywords"      foreground="#FF559CD6" fontWeight="bold" exampleText="if (args == null) throw new ArgumentNullException(nameof(args));" />

	<Color name="CommentMarkerSetTodo"       foreground="#FFFF0000" fontWeight="bold" />
	<Color name="CommentMarkerSetHackUndone" foreground="#FF8B008B" fontWeight="bold" />
</SyntaxDefinition>
